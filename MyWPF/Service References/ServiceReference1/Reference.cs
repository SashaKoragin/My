//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyWPF.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkCommutator", Namespace="http://schemas.datacontract.org/2004/07/ViewModelLib.ViewModelPage.ViewModel")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MyWPF.ServiceReference1.LinkCommutator[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MyWPF.ServiceReference1.Link[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MyWPF.ServiceReference1.Link))]
    public partial class LinkCommutator : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyWPF.ServiceReference1.Link[] DocumentationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyWPF.ServiceReference1.Link[] Documentation {
            get {
                return this.DocumentationField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentationField, value) != true)) {
                    this.DocumentationField = value;
                    this.RaisePropertyChanged("Documentation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Link", Namespace="http://schemas.datacontract.org/2004/07/ViewModelLib.ViewModelPage")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MyWPF.ServiceReference1.LinkCommutator[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MyWPF.ServiceReference1.LinkCommutator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MyWPF.ServiceReference1.Link[]))]
    public partial class Link : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LabelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object OpenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Label {
            get {
                return this.LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelField, value) != true)) {
                    this.LabelField = value;
                    this.RaisePropertyChanged("Label");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Open {
            get {
                return this.OpenField;
            }
            set {
                if ((object.ReferenceEquals(this.OpenField, value) != true)) {
                    this.OpenField = value;
                    this.RaisePropertyChanged("Open");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IServiceLotusNotes")]
    public interface IServiceLotusNotes {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLotusNotes/IntrfaceLitus", ReplyAction="http://tempuri.org/IServiceLotusNotes/IntrfaceLitusResponse")]
        void IntrfaceLitus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLotusNotes/IntrfaceLitus", ReplyAction="http://tempuri.org/IServiceLotusNotes/IntrfaceLitusResponse")]
        System.Threading.Tasks.Task IntrfaceLitusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLotusNotes/Links", ReplyAction="http://tempuri.org/IServiceLotusNotes/LinksResponse")]
        MyWPF.ServiceReference1.LinkCommutator[] Links();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLotusNotes/Links", ReplyAction="http://tempuri.org/IServiceLotusNotes/LinksResponse")]
        System.Threading.Tasks.Task<MyWPF.ServiceReference1.LinkCommutator[]> LinksAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceLotusNotesChannel : MyWPF.ServiceReference1.IServiceLotusNotes, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceLotusNotesClient : System.ServiceModel.ClientBase<MyWPF.ServiceReference1.IServiceLotusNotes>, MyWPF.ServiceReference1.IServiceLotusNotes {
        
        public ServiceLotusNotesClient() {
        }
        
        public ServiceLotusNotesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceLotusNotesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLotusNotesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLotusNotesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void IntrfaceLitus() {
            base.Channel.IntrfaceLitus();
        }
        
        public System.Threading.Tasks.Task IntrfaceLitusAsync() {
            return base.Channel.IntrfaceLitusAsync();
        }
        
        public MyWPF.ServiceReference1.LinkCommutator[] Links() {
            return base.Channel.Links();
        }
        
        public System.Threading.Tasks.Task<MyWPF.ServiceReference1.LinkCommutator[]> LinksAsync() {
            return base.Channel.LinksAsync();
        }
    }
}
